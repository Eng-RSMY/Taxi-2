<?php

namespace FunPro\ServiceBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\NoResultException;
use FunPro\DriverBundle\Entity\Driver;
use FunPro\ServiceBundle\Entity\Service;
use FunPro\ServiceBundle\Entity\ServiceLog;

/**
 * ServiceLogRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ServiceLogRepository extends EntityRepository
{
    /**
     * Get current|last status of service
     *
     * @deprecated instead of this method, use $service->getStatus()
     * @param Service $service
     *
     * @throws NoResultException
     * @throws NonUniqueResultException
     *
     * @return ServiceLog
     */
    public function getLastLog(Service $service)
    {
        $queryBuilder = $this->createQueryBuilder('s');

        return $queryBuilder->where($queryBuilder->expr()->eq('s.service', ':service'))
            ->orderBy('s.atTime', 'DESC')
            ->setParameter('service', $service)
            ->getQuery()
            ->setMaxResults(1)
            ->getSingleResult();
    }

    /**
     * @param Driver    $driver
     * @param \DateTime $from
     * @param \Datetime $till
     *
     * @return int
     */
    public function getServiceTime(Driver $driver, \DateTime $from, \Datetime $till)
    {
        $till = $till->setTime(23, 59, 59);
        $queryBuilder = $this->getEntityManager()->getRepository('FunProServiceBundle:Service')
            ->createQueryBuilder('s');

        return $queryBuilder
            ->select('SUM(TIMESTAMPDIFF(SECOND, startLog.atTime, finishLog.atTime))')
            ->innerJoin('s.logs', 'startLog', 'WITH', 's.id = startLog.service and startLog.status = '. ServiceLog::STATUS_START)
            ->innerJoin('s.logs', 'finishLog', 'WITH', 's.id = finishLog.service and finishLog.status = '. ServiceLog::STATUS_START)
            ->innerJoin('s.car', 'c')
            ->where($queryBuilder->expr()->eq('c.driver', ':driver'))
            ->andWhere($queryBuilder->expr()->gte('startLog.atTime', ':start'))
            ->andWhere($queryBuilder->expr()->lte('finishLog.atTime', ':finish'))
            ->setParameter('driver', $driver)
            ->setParameter('start', $from)
            ->setParameter('finish', $till)
            ->getQuery()
            ->getSingleScalarResult();
    }
}
