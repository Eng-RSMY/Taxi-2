<?php

namespace FunPro\ServiceBundle\Repository;

use Doctrine\ORM\EntityRepository;
use FunPro\DriverBundle\Entity\Car;
use FunPro\DriverBundle\Entity\Driver;
use FunPro\PassengerBundle\Entity\Passenger;
use FunPro\ServiceBundle\Entity\FloatingCost;
use FunPro\ServiceBundle\Entity\Service;
use Proxies\__CG__\FunPro\ServiceBundle\Entity\ServiceLog;

/**
 * ServiceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ServiceRepository extends EntityRepository
{
    /**
     * Get a service [hydrate: car, plaque, driver] by id
     *
     * @param $serviceId
     *
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     *
     * @return Service
     */
    public function getWithCar($serviceId)
    {
        $queryBuilder = $this->createQueryBuilder('s');

        return $queryBuilder->select(array('c', 's', 'p', 'd'))
            ->innerJoin('s.car', 'c')
            ->innerJoin('c.plaque', 'p')
            ->innerJoin('c.driver', 'd')
            ->where($queryBuilder->expr()->eq('s.id', ':service_id'))
            ->setParameter('service_id', $serviceId)
            ->getQuery()
            ->getSingleResult();
    }



    public function getLastServiceOfDriver(Driver $driver)
    {
        $queryBuilder = $this->createQueryBuilder('s');

        return $queryBuilder->select(array('s', 'p', 'l', 'c'))
            ->innerJoin('s.logs', 'l')
            ->innerJoin('s.car', 'car')
            ->leftJoin('s.passenger', 'p')
            ->leftJoin('s.agent', 'a')
            ->leftJoin('s.canceledReason', 'c')
            ->where($queryBuilder->expr()->eq('car.driver', ':driver'))
            ->orderBy('l.atTime', 'DESC')
            ->setParameter('driver', $driver)
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }

    public function getLastServiceOfPassenger(Passenger $passenger)
    {
        $queryBuilder = $this->createQueryBuilder('s');

        return $queryBuilder->select(array('s', 'l', 'c', 'car'))
            ->innerJoin('s.logs', 'l')
            ->leftJoin('s.car', 'car')
            ->leftJoin('s.canceledReason', 'c')
            ->where($queryBuilder->expr()->eq('s.passenger', ':passenger'))
            ->orderBy('l.atTime', 'DESC')
            ->setParameter('passenger', $passenger)
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }

    /**
     * Calculate total cost of service
     *
     * @param Service $service
     *
     * @return int
     */
    public function getTotalCost(Service $service)
    {
        $cost = $service->getPrice();
        /** @var FloatingCost $floatCost */
        foreach ($service->getFloatingCosts() as $floatCost) {
            $cost += $floatCost->getCost();
        }

        return $cost;
    }

    /**
     * Get a service[hydrate: logs] that is doing by given car now.
     *
     * @param Car $car
     *
     * @return Service
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getDoingServiceFilterByCar(Car $car)
    {
        $queryBuilder = $this->createQueryBuilder('s');

        $service = $queryBuilder->select(array('s', 'l'))
            ->innerJoin('s.logs', 'l')
            ->where($queryBuilder->expr()->eq('s.car', ':car'))
            ->setParameter('car', $car)
            ->orderBy('l.atTime', 'DESC')
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();

        if ($service and $service->getLogs()->last()->getStatus() == ServiceLog::STATUS_START) {
            return $service;
        }
    }
}
