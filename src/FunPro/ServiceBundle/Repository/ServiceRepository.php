<?php

namespace FunPro\ServiceBundle\Repository;

use Doctrine\ORM\EntityRepository;
use FunPro\DriverBundle\Entity\Car;
use FunPro\ServiceBundle\Entity\Service;
use Proxies\__CG__\FunPro\ServiceBundle\Entity\ServiceLog;

/**
 * ServiceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ServiceRepository extends EntityRepository
{
    /**
     * @param $id
     *
     * @return Service
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getWithCar($id)
    {
        $qb = $this->createQueryBuilder('r');

        return $qb->select(array('c', 'r', 'p', 'd'))
            ->innerJoin('r.car', 'c')
            ->innerJoin('c.plaque', 'p')
            ->innerJoin('c.driver', 'd')
            ->where($qb->expr()->eq('r.id', ':service_id'))
            ->setParameter('service_id', $id)
            ->getQuery()
            ->getSingleResult();
    }

    /**
     * @param Car $car
     *
     * @return Service
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getDoingServiceFilterByCar(Car $car)
    {
        $qb = $this->createQueryBuilder('s');

        $service = $qb->select(array('s', 'l'))
            ->innerJoin('s.logs', 'l')
            ->where($qb->expr()->eq('s.car', ':car'))
            ->setParameter('car', $car)
            ->orderBy('l.atTime', 'DESC')
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();

        if ($service and $service->getLogs()->last()->getStatus() == ServiceLog::STATUS_START) {
            return $service;
        }
    }
}
