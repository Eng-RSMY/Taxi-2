<?php

namespace FunPro\UserBundle\Repository;

use DateTime;
use Doctrine\ORM\Query\QueryException;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NonUniqueResultException;
use FunPro\UserBundle\Entity\Token;
use FunPro\UserBundle\Entity\User;

/**
 * TokenRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TokenRepository extends EntityRepository
{
    /**
     * @param User $user
     *
     * @return Token $token
     *
     * @throws \Doctrine\ORM\NoResultException
     */
    public function getToken(User $user, $token)
    {
        $queryBuilder = $this->createQueryBuilder('t');

        try {
            $token = $queryBuilder->select(array('t', 'u'))
                ->innerJoin('t.user', 'u')
                ->where($queryBuilder->expr()->eq('u.id', ':userId'))
                ->andWhere($queryBuilder->expr()->eq('t.token', ':token'))
                ->setParameter('userId', $user->getId())
                ->setParameter('token', $token)
                ->getQuery()
                ->getSingleResult();
            return $token;
        } catch (NonUniqueResultException $e) {
        }
    }

    /**
     * @param User     $user
     * @param DateTime $period
     *
     * @return int|null
     */
    public function getTokenCount(User $user, DateTime $period = null)
    {
        $queryBuilder = $this->createQueryBuilder('t');

        try {
            return $queryBuilder->select('count(t)')
                ->innerJoin('t.user', 'u')
                ->where($queryBuilder->expr()->eq('u.id', ':userId'))
                ->andWhere($queryBuilder->expr()->gte('t.createdAt', ':period'))
                ->setParameter('userId', $user->getId())
                ->setParameter('period', $period)
                ->getQuery()
                ->getSingleScalarResult();
        } catch (QueryException $e) {
        }
    }
}
