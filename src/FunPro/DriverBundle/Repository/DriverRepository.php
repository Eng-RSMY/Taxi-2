<?php

namespace FunPro\DriverBundle\Repository;

use Doctrine\ORM\EntityRepository;
use FunPro\DriverBundle\Entity\Car;
use FunPro\GeoBundle\Doctrine\ValueObject\Point;

/**
 * driverRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DriverRepository extends EntityRepository
{
    /**
     * @TODO: Use Spatial Mysql Distance function for Mysql > 5.6.1
     * @param Point $point
     * @param integer $distance radius in meter
     * @return array
     */
    public function getAllAround(Point $point, $distance)
    {
        $qb = $this->createQueryBuilder('dr');

        $qb->select(array('dr', 'de', 'c', 'w'))
            ->innerJoin('dr.devices', 'de')
            ->innerJoin('dr.cars', 'c')
            ->innerJoin('c.wakeful', 'w')
            ->where($qb->expr()->eq('c.current', ':current'))
            ->andWhere($qb->expr()->eq('c.status', ':carStatus'))
            ->andWhere($qb->expr()->lte('Distance(w.point, point_str(:location))', ':distance'))
            ->setParameter('current', true)
            ->setParameter('carStatus', Car::STATUS_WAKEFUL)
            ->setParameter('location', $point)
            ->setParameter('distance', $distance/100000);

        return $qb->getQuery()
            ->getResult();
    }

    /**
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function getAllDriversQueryBuilder()
    {
        $qb = $this->createQueryBuilder('d');
        return $qb;
    }

    /**
     * @param $driverId
     *
     * @return mixed
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getWithCar($driverId)
    {
        $qb = $this->createQueryBuilder('d');

        return $qb->select(array('d', 'c'))
            ->innerJoin('d.cars', 'c')
            ->where($qb->expr()->eq('c.current', true))
            ->andWhere($qb->expr()->eq('d.id', ':id'))
            ->setParameter('id', $driverId)
            ->getQuery()
            ->getOneOrNullResult();
    }
}
