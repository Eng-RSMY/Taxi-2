<?php

namespace FunPro\EngineBundle\Repository;

use DateTime;
use Doctrine\ORM\EntityRepository;
use FunPro\UserBundle\Entity\User;

/**
 * TokenRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TokenRepository extends EntityRepository
{
    /**
     * @param User $user
     * @return mixed
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getLastToken(User $user)
    {
        $qb = $this->createQueryBuilder('t');

        return $qb->select(array('t', 'u'))
            ->innerJoin('t.user', 'u')
            ->where($qb->expr()->eq('u.id', ':userId'))
            ->andWhere($qb->expr()->eq('t.expired', ':status'))
            ->setParameter('userId', $user->getId())
            ->setParameter('status', false)
            ->orderBy('t.createdAt', 'DESC')
            ->getQuery()
            ->setMaxResults(1)
            ->getSingleResult();
    }

    public function getTokenCount(User $user, DateTime $period=null)
    {
        $qb = $this->createQueryBuilder('t');

        return $qb->select('count(t)')
            ->innerJoin('t.user', 'u')
            ->where($qb->expr()->eq('u.id', ':userId'))
            ->andWhere($qb->expr()->gte('t.createdAt', ':period'))
            ->setParameter('userId', $user->getId())
            ->setParameter('period', $period)
            ->getQuery()
            ->getSingleScalarResult();
    }
}
