<?php

namespace FunPro\FinancialBundle\Repository;

use Doctrine\ORM\EntityRepository;
use FunPro\FinancialBundle\Entity\DiscountCode;
use FunPro\GeoBundle\Utility\Util;
use FunPro\PassengerBundle\Entity\Passenger;
use FunPro\ServiceBundle\Entity\Service;

/**
 * DiscountCodeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DiscountCodeRepository extends EntityRepository
{
    /**
     * @param Service $service
     * @param DiscountCode $discountCode
     * @return bool
     */
    public function canUseDiscount(Service $service, DiscountCode $discountCode)
    {
        $distance = Util::distance(
            $service->getStartPoint()->getLatitude(),
            $service->getStartPoint()->getLongitude(),
            $discountCode->getOriginLocation()->getLatitude(),
            $discountCode->getOriginLocation()->getLongitude()
        );

        if ($distance > $discountCode->getLocationRadius()) {
            return false;
        }

        $usageCountPerUser = $this->getUsageCount($discountCode, $service->getPassenger());
        if ($usageCountPerUser and $usageCountPerUser >= $discountCode->getMaxUsagePerUser()) {
            return false;
        }

        $usageCount = $this->getUsageCount($discountCode);
        if ($usageCount and $usageCount >= $discountCode->getMaxUsage()) {
            return false;
        }

        if ($discountCode->getExpiredAt()->getTimestamp() < time()) {
            return false;
        }

        return true;
    }

    public function getUsageCount(DiscountCode $discountCode, Passenger $passenger = null)
    {
        $qb = $this->getEntityManager()->createQueryBuilder()
            ->select('count(s)')
            ->from('FunProServiceBundle:Service', 's');

        $qb->where($qb->expr()->eq('s.discountCode', ':discountCode'))
            ->setParameter('discountCode', $discountCode);

        if ($passenger) {
            $qb->andWhere($qb->expr()->eq('s.passenger', ':passenger'))
                ->setParameter('passenger', $passenger);
        }

        return $qb
            ->getQuery()
            ->getSingleScalarResult();
    }
}
