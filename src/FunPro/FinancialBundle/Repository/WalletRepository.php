<?php

namespace FunPro\FinancialBundle\Repository;

use CrEOF\Spatial\PHP\Types\Geometry\Point;
use Doctrine\ORM\EntityRepository;
use FunPro\FinancialBundle\Entity\Currency;
use FunPro\FinancialBundle\Entity\Wallet;
use FunPro\UserBundle\Entity\User;

/**
 * WalletRepository
 *
 * @deprecated
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class WalletRepository extends EntityRepository
{
    /**
     * @param User     $user
     * @param Currency $currency
     *
     * @return Wallet
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getUserWallet(User $user, Currency $currency)
    {
        $queryBuilder = $this->createQueryBuilder('w');

        $wallet = $queryBuilder->select(array('w'))
            ->where($queryBuilder->expr()->eq('w.owner', ':user'))
            ->andWhere($queryBuilder->expr()->eq('w.currency', ':currency'))
            ->setParameter('user', $user)
            ->setParameter('currency', $currency)
            ->getQuery()
            ->getOneOrNullResult();

        if (!$wallet) {
            $wallet = new Wallet($user, $currency, $currency->getName());
            $this->getEntityManager()->persist($wallet);
        }

        return $wallet;
    }

    public function getPayableWallets(User $user, $cost, Point $point)
    {
        $queryBuilder = $this->createQueryBuilder('w');

        return $queryBuilder->select(array('w', 'c'))
            ->innerJoin('w.owner', 'o')
            ->innerJoin('w.currency', 'c')
            ->innerJoin('c.regions', 'r')
            ->where($queryBuilder->expr()->eq('w.owner', ':owner'))
            ->andWhere($queryBuilder->expr()->gte('w.balance', ':cost'))
            ->andWhere('ST_Contains(r.region, geomfromtext(:point)) = true')
            ->setParameter('owner', $user)
            ->setParameter('cost', $cost)
            ->setParameter('point', $point)
            ->getQuery()
            ->getResult();
    }
}
