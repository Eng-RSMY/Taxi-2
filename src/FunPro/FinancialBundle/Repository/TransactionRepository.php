<?php

namespace FunPro\FinancialBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;
use Doctrine\ORM\QueryBuilder;
use FunPro\DriverBundle\Entity\Driver;
use FunPro\FinancialBundle\Entity\Transaction;
use FunPro\UserBundle\Entity\User;
use Symfony\Component\VarDumper\VarDumper;

/**
 * TransactionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TransactionRepository extends EntityRepository
{
    /**
     * @param \DateTime $from
     * @param \Datetime $till
     * @param null $min
     * @param null $max
     * @param null $direction
     * @param array $types
     * @param int $limit
     * @param int $offset
     * @param string $resultType `result` | `query` | `query_builder`
     * @return array|Query|QueryBuilder
     */
    public function getAllFilterBy(
        User $user,
        \DateTime $from = null,
        \Datetime $till = null,
        $min = null,
        $max = null,
        $direction = null,
        array $types = null,
        $limit = 10,
        $offset = 0,
        $resultType = 'result'
    ) {
        $queryBuilder = $this->createQueryBuilder('t');

        $queryBuilder->select(array('t', 's'))
            ->leftJoin('t.service', 's')
            ->where($queryBuilder->expr()->eq('t.user', ':user'))
            ->setParameter('user', $user);

        if ($from) {
            $queryBuilder->andWhere($queryBuilder->expr()->gte('t.createdAt', ':from'))
                ->setParameter('from', $from);
        }

        if ($till) {
            $queryBuilder->andWhere($queryBuilder->expr()->lte('t.createdAt', ':till'))
                ->setParameter('till', $till);
        }

        if ($min) {
            $queryBuilder->andWhere($queryBuilder->expr()->gte('t.amount', ':min'))
                ->setParameter('min', $min);
        }

        if ($max) {
            $queryBuilder->andWhere($queryBuilder->expr()->lte('t.amount', ':max'))
                ->setParameter('max', $max);
        }

        if ($direction) {
            $queryBuilder->andWhere($queryBuilder->expr()->eq('t.direction', ':dir'))
                ->setParameter('dir', $direction);
        }

        if ($types) {
            $queryBuilder->andWhere($queryBuilder->expr()->in('t.type', ':types'))
                ->setParameter('types', $types);
        }

        $query = $queryBuilder
            ->setMaxResults($limit)
            ->setFirstResult($offset)
            ->getQuery();

        switch ($resultType) {
            case 'result':
                return $query->getResult();
                break;
            case 'query':
                return $query;
                break;
            case 'query_builder':
                return $queryBuilder;
                break;
        }
    }

    /**
     * @param \DateTime|null $from
     * @param \Datetime|null $till
     * @return array
     */
    public function getCreditStatus(Driver $driver, \DateTime $from = null, \Datetime $till = null)
    {
        $qb = $this->getAllFilterBy($driver, $from, $till, null, null, null, null, 999999, 0, 'query_builder')
            ->select(array('sum(t.amount) as amount', 't.type'))
            ->groupBy('t.type');

        $results = $qb->getQuery()
            ->getResult();

        $status = array();
        foreach ($results as $result) {
            $type = $this->convertTransactionTypeToString($result['type']);
            $status[$type] = $result['amount'];
        }

        return $status;
    }

    /**
     * @param $type
     *
     * @return string
     */
    private function convertTransactionTypeToString($type)
    {
        switch ($type) {
            case Transaction::TYPE_PAY:
                return 'pay';
                break;
            case Transaction::TYPE_WAGE:
                return 'wage';
                break;
            case Transaction::TYPE_REWARD:
                return 'reward';
                break;
            case Transaction::TYPE_COMMISSION:
                return 'commission';
                break;
            case Transaction::TYPE_CREDIT:
                return 'credit';
                break;
            case Transaction::TYPE_WITHDRAW:
                return 'withdraw';
                break;
            case Transaction::TYPE_MOVE:
                return 'move';
                break;
        }
    }
}
